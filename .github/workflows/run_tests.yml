# This is a basic workflow to help you get started with Actions

name: Run tests

# Controls when the action will run. 
on:
  pull_request:
    types: [opened, synchronize, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    types: trigger-run-tests

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.9", "3.10" ]

    runs-on: ${{ matrix.os }}

    steps:

      #----------------------------------------------
      #          install poetry
      #----------------------------------------------
      - name: Install Poetry
        run: pipx install poetry

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      #----------------------------------------------
      #    install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Setup Neo4j Docker
        run: |
          docker run --detach --name kgx-neo4j-unit-test -p 8484:7474 -p 8888:7687 --env NEO4J_AUTH=neo4j/test neo4j:4.3.0
          docker run --detach --name kgx-neo4j-integration-test -p 7474:7474 -p 7687:7687 --env NEO4J_AUTH=neo4j/test neo4j:4.3.0
          docker ps -a

      - name: Wait
        uses: jakejarvis/wait-action@master
        with:
          time: '45s'

      - name: Run tests
        run: |
          poetry run pytest tests/*

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
